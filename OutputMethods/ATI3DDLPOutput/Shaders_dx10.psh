SamplerState	TextureSampler;

Texture2D g_Left			: register(t0);
Texture2D g_Right			: register(t1);
Texture2D <float3> g_Gamma	: register(t2);

float4  cHalfScreenSize = { 640 / 2, 480 / 2, 0.5 / 640, 0.5 / 480 };
float4  cOffset = { 0.0f, 0.0f, 0.0f, 0.0f };

struct PS_Input
{
	float2 t : TEXCOORD0;
};

float4 shaderDLP3D( PS_Input input ) : SV_Target
{
	if (frac(input.t.y * cHalfScreenSize.y + cOffset.y) < 0.5f) // y odd check
	{
		if (frac(input.t.x * cHalfScreenSize.x + cOffset.x) < 0.5f)
			return g_Left.SampleLevel( TextureSampler, input.t, 0 );
		else
			return g_Right.SampleLevel( TextureSampler, input.t, 0 );
	}
	else
	{
		if (frac(input.t.x * cHalfScreenSize.x + cOffset.x) < 0.5f)
			return g_Right.SampleLevel( TextureSampler, input.t, 0 );
		else
			return g_Left.SampleLevel( TextureSampler, input.t, 0 );
	}
};

float4 shaderMono( PS_Input input ) : SV_Target
{
	float4 cL = g_Left.Sample( TextureSampler, input.t );
	return cL;
};

